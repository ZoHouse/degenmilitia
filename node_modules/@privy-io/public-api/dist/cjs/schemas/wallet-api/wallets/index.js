"use strict";var e=require("zod"),t=require("@privy-io/api-base"),i=require("../../api.js"),a=require("../../core.js"),r=require("../../transaction.js"),n=require("../export.js"),s=require("./spark/index.js"),o=require("./spark/utils.js");require("bs58"),require("libphonenumber-js/max"),require("viem");const p=e.z.enum(["secp256k1","ed25519","starknet"]),l=e.z.string().regex(/^[mM]'?(\/\d+'?)*$/),c=e.z.literal("ECDSA"),d=e.z.literal("EdDSA"),z=e.z.union([c,d]),u=e.z.string().regex(/^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}$/,"Chain ID must be a valid CAIP-2 chain ID, e.g. 'eip155:1'");let g=e.z.object({address:a.SolanaWalletAddress.optional(),chain_type:e.z.literal("solana").optional(),wallet_id:e.z.string().optional()}),h=e.z.object({address:a.WalletAddress.optional(),chain_type:e.z.literal("ethereum").optional(),wallet_id:e.z.string().optional()});const m=e.z.enum(["root","manager","delegated-actions"]).nullable(),_=e.z.object({method:e.z.literal("signTransaction"),params:e.z.object({transaction:e.z.string(),encoding:e.z.literal("base64")}).strict()}).merge(g).strict(),x=e.z.object({method:e.z.literal("signAndSendTransaction"),caip2:u,params:e.z.object({transaction:e.z.string(),encoding:e.z.literal("base64")}).strict(),sponsor:e.z.boolean().optional()}).merge(g).strict(),R=e.z.object({method:e.z.literal("signMessage"),params:e.z.object({message:e.z.string(),encoding:e.z.literal("base64")}).strict()}).merge(g).strict(),y=e.z.string().startsWith("0x").refine((e=>!e.includes(".")),"Invalid hex string: must start with '0x' and not contain decimal points"),b=y.transform((e=>e));let A=e.z.number().int().nonnegative().safe({message:'Please use hex string prefixed with "0x" to represent large numbers (e.g. "0xDE0B6B3A7640000").'});const W=e.z.union([y,A],{invalid_type_error:"Invalid quantity: must be either a hex string starting with '0x' or a non-negative integer."}),I=e.z.object({from:a.WalletAddress.optional(),to:a.WalletAddress.optional(),chain_id:W.optional(),nonce:W.optional(),data:y.optional(),value:W.optional(),type:e.z.union([e.z.literal(0),e.z.literal(1),e.z.literal(2)]).optional(),gas_limit:W.optional(),gas_price:W.optional(),max_fee_per_gas:W.optional(),max_priority_fee_per_gas:W.optional()}).strict(),S=e.z.object({method:e.z.literal("eth_signTransaction"),params:e.z.object({transaction:I}).strict()}).merge(h).strict(),v=e.z.object({method:e.z.literal("eth_sendTransaction"),caip2:u,params:e.z.object({transaction:I}).strict(),sponsor:e.z.boolean().optional()}).merge(h).strict(),j=e.z.object({message:e.z.string(),encoding:e.z.union([e.z.literal("utf-8"),e.z.literal("hex")])}).strict(),T=e.z.object({method:e.z.literal("personal_sign"),params:j}).merge(h).strict(),k=e.z.object({method:e.z.literal("secp256k1_sign"),params:e.z.object({hash:b}).strict()}).merge(h).strict(),D=e.z.object({method:e.z.literal("eth_sign7702Authorization"),params:e.z.object({contract:a.WalletAddress,chain_id:W,nonce:W.optional()}).strict()}).merge(h).strict(),f=e.z.object({params:e.z.object({hash:b}).strict()}).strict(),C=e.z.record(e.z.string(),e.z.any()),E=e.z.record(e.z.array(e.z.object({name:e.z.string(),type:e.z.string()}))),P=e.z.object({method:e.z.literal("eth_signTypedData_v4"),params:e.z.object({typed_data:e.z.object({domain:C,types:E,message:e.z.record(e.z.string(),e.z.any()),primary_type:e.z.string()}).strict()}).strict()}).merge(h).strict(),w=e.z.object({address:e.z.string(),method:e.z.literal("exportPrivateKey"),params:n.PrivateKeyExportInput}).strict(),G=e.z.discriminatedUnion("method",[S,v,T,P,k,D]),q=e.z.discriminatedUnion("method",[_,x,R]),K=e.z.union([G,q,w,s.WalletApiSparkRpcInput]),L=e.z.object({method:e.z.literal("signTransaction"),data:e.z.object({signed_transaction:e.z.string(),encoding:e.z.literal("base64")})}),B=e.z.object({method:e.z.literal("signAndSendTransaction"),data:e.z.object({transaction_id:e.z.string().optional(),hash:e.z.string(),caip2:u})}),O=e.z.object({method:e.z.literal("signMessage"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("base64")})}),M=e.z.object({method:e.z.literal("eth_signTransaction"),data:e.z.object({signed_transaction:e.z.string(),encoding:e.z.literal("rlp")})}),N=e.z.object({method:e.z.literal("eth_sendTransaction"),data:e.z.object({transaction_id:e.z.string().optional(),hash:e.z.string(),caip2:u,transaction_request:I.optional()})}),Q=e.z.object({method:e.z.literal("personal_sign"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("hex")})}),U=e.z.object({method:e.z.literal("secp256k1_sign"),data:e.z.object({signature:y,encoding:e.z.literal("hex")})});let F=e.z.object({contract:a.WalletAddress,chain_id:W,nonce:W,r:y,s:y,y_parity:e.z.number()});const H=e.z.object({method:e.z.literal("eth_sign7702Authorization"),data:e.z.object({authorization:F})}),V=e.z.object({method:e.z.literal("eth_signTypedData_v4"),data:e.z.object({signature:e.z.string(),encoding:e.z.literal("hex")})}),Y=e.z.object({method:e.z.literal("exportPrivateKey"),data:n.PrivateKeyExportInput}),$=e.z.object({data:e.z.object({signature:y,encoding:e.z.literal("hex")})}).strict(),Z=e.z.discriminatedUnion("method",[L,B,O,M,N,Q,U,H,V,Y,s.WalletApiTransferRpcResponse,s.WalletApiGetBalanceRpcResponse,s.WalletApiTransferTokensRpcResponse,s.WalletApiGetStaticDepositAddressRpcResponse,s.WalletApiClaimStaticDepositRpcResponse,s.WalletApiGetClaimStaticDepositQuoteRpcResponse,s.WalletApiPayLightningInvoiceRpcResponse,s.WalletApiCreateLightningInvoiceRpcResponse,s.WalletApiSignMessageWithIdentityKeyRpcResponse]),J=e.z.object({display_name:e.z.string().optional(),public_key:e.z.string(),role:m.optional()}),X=e.z.literal("ethereum"),ee=e.z.literal("solana"),te=e.z.literal("cosmos"),ie=e.z.literal("stellar"),ae=e.z.literal("sui"),re=e.z.literal("aptos"),ne=e.z.literal("movement"),se=e.z.literal("tron"),oe=e.z.literal("bitcoin-segwit"),pe=e.z.literal("near"),le=e.z.literal("ton"),ce=e.z.literal("spark"),de=e.z.literal("starknet"),ze=e.z.union([te,ie,ae,re,ne,se,oe,pe,le,de]),ue=e.z.literal("curve_signing"),ge=e.z.union([ze,ce]),he=e.z.union([e.z.literal("solana"),e.z.literal("ethereum")]),me=e.z.union([ge,he]),_e=e.z.enum(["hd","private-key"]),xe=e.z.enum(["ENTROPY_TO_SEED","ENTROPY_TO_MNEMONIC_TO_SEED"]),Re=e.z.object({id:e.z.string(),address:e.z.string(),public_key:e.z.string().optional(),created_at:e.z.number(),exported_at:e.z.number().nullable(),imported_at:e.z.number().nullable(),chain_type:me,policy_ids:e.z.array(e.z.string()),authorization_threshold:e.z.number().optional(),additional_signers:e.z.array(e.z.object({signer_id:e.z.string().cuid2(),override_policy_ids:e.z.array(e.z.string()).optional()})),owner_id:e.z.string().cuid2().nullable()}),ye=e.z.string().cuid2(),be=e.z.string(),Ae=e.z.union([e.z.object({user_id:e.z.string().startsWith("did:privy:",{message:"user_id must start with did:privy:"})}).strict(),e.z.object({public_key:be}).strict(),e.z.null()]),We={owner:Ae.optional(),owner_id:ye.nullable().optional()},Ie=e.z.array(e.z.string().cuid2()).max(1,"Only one policy ID can be set").optional(),Se=e.z.array(e.z.object({signer_id:ye,override_policy_ids:Ie}).strict()),ve=e.z.object({chain_type:me,policy_ids:Ie,authorization_key_ids:e.z.array(e.z.string()).optional(),authorization_threshold:e.z.number().optional(),additional_signers:Se.optional(),...We}).strict(),je=ve.refine((e=>{let t=void 0!==e.authorization_key_ids||void 0!==e.authorization_threshold,i=void 0!==e.additional_signers;return!t||!i}),"Please provide either additional_signers or authorization_key_ids, not both").refine((e=>void 0===e.authorization_threshold||e.authorization_threshold>=1&&e.authorization_key_ids&&e.authorization_threshold<=e.authorization_key_ids.length),{message:"If specified, authorization_threshold must be an integer between 1 and the length of authorization_key_ids."}).refine((e=>!e.owner||!e.owner_id),{message:"Only one of owner or owner_id can be provided."}).catch((e=>{throw new t.InvalidInputError(e.error.message,t.PrivyErrorCode.INVALID_DATA)})),Te=e.z.object({id:e.z.string(),chain_type:me,address:e.z.string(),authorization_threshold:e.z.number().optional()}),ke=e.z.object({wallet_id:e.z.string({required_error:"Wallet ID must be provided",invalid_type_error:"Wallet ID is not a valid string"}).min(1)}).catch((({error:e})=>{throw new t.InvalidInputError(e.message,t.PrivyErrorCode.INVALID_DATA)})),De=e.z.enum(["usdc","eth","pol","usdt"]),fe=e.z.enum(["sol"]),Ce=e.z.enum([...De.options,...fe.options]),Ee=e.z.enum(["ethereum","arbitrum","base","linea","optimism","polygon","solana","zksync_era","sepolia","arbitrum_sepolia","base_sepolia","linea_testnet","optimism_sepolia","polygon_amoy"]),Pe=e.z.enum(["usd"]),we=e.z.object({asset:e.z.union([Ce,e.z.array(Ce).max(10)]),chain:e.z.union([Ee,e.z.array(Ee).max(10)]),include_currency:Pe.optional()}),Ge=e.z.object({chain:Ee,asset:Ce,raw_value:e.z.string(),raw_value_decimals:e.z.number(),display_values:e.z.record(e.z.union([Ce,Pe]),e.z.string())}),qe=e.z.object({balances:e.z.array(Ge.refine((e=>e.asset in e.display_values),{message:"display_values must include the asset as a key",path:["display_values"]}))}),Ke=e.z.object({id:e.z.string()}),Le=e.z.object({id:e.z.string(),display_name:e.z.string().nullable(),public_key:e.z.string(),role:m,created_at:e.z.number()}),Be=e.z.object({id:e.z.string(),display_name:e.z.string().nullable(),public_key:e.z.string(),created_at:e.z.number()}),Oe=i.Pagination.extend({chain_type:me.optional(),user_id:e.z.string().optional()}).strict(),Me=e.z.object({policy_ids:Ie,authorization_key_ids:e.z.array(e.z.string()).optional(),authorization_threshold:e.z.number().optional(),additional_signers:Se.optional(),...We}).strict().superRefine(((e,t)=>{Object.values(e).every((e=>void 0===e||""===e))&&t.addIssue({code:"custom",message:"At least one field must be provided"}),void 0!==e.owner&&void 0!==e.owner_id&&t.addIssue({code:"custom",message:"Only one of owner or owner_id can be provided."}),void 0!==e.authorization_threshold&&0!==e.authorization_threshold&&(e.authorization_threshold<0&&t.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}),void 0===e.authorization_key_ids&&t.addIssue({code:"custom",path:["authorization_key_ids"],message:"An array of `authorization_key_ids` must be provided for a non-zero `authorization_threshold`."}),e.authorization_key_ids&&e.authorization_threshold>e.authorization_key_ids.length&&t.addIssue({code:"custom",path:["authorization_threshold"],message:"`authorization_threshold` must be non-negative if specified."}))})),Ne=i.Pagination.extend({chain:e.z.literal("base"),asset:e.z.union([Ce,e.z.array(Ce).max(2)])}).strict(),Qe=e.z.object({type:e.z.literal("transfer_sent"),sender:e.z.string(),sender_privy_user_id:e.z.string().nullable(),recipient:e.z.string(),recipient_privy_user_id:e.z.string().nullable()}).strict().merge(Ge),Ue=e.z.object({type:e.z.literal("transfer_received"),sender:e.z.string(),sender_privy_user_id:e.z.string().nullable(),recipient:e.z.string(),recipient_privy_user_id:e.z.string().nullable()}).strict().merge(Ge),Fe=e.z.discriminatedUnion("type",[Qe,Ue]),He=r.BaseTransactionResponse.extend({details:Fe.nullable()}),Ve=He.extend({privy_transaction_id:e.z.string(),wallet_id:e.z.string()}),Ye=e.z.object({transactions:e.z.array(Ve),next_cursor:e.z.string().nullable()}),$e=e.z.object({chain_type:X,provider_user_id:e.z.string().min(1),provider:e.z.string()});exports.WalletApiClaimStaticDepositRpcInput=s.WalletApiClaimStaticDepositRpcInput,exports.WalletApiClaimStaticDepositRpcResponse=s.WalletApiClaimStaticDepositRpcResponse,exports.WalletApiCreateLightningInvoiceRpcInput=s.WalletApiCreateLightningInvoiceRpcInput,exports.WalletApiCreateLightningInvoiceRpcResponse=s.WalletApiCreateLightningInvoiceRpcResponse,exports.WalletApiGetBalanceRpcInput=s.WalletApiGetBalanceRpcInput,exports.WalletApiGetBalanceRpcResponse=s.WalletApiGetBalanceRpcResponse,exports.WalletApiGetClaimStaticDepositQuoteRpcInput=s.WalletApiGetClaimStaticDepositQuoteRpcInput,exports.WalletApiGetClaimStaticDepositQuoteRpcResponse=s.WalletApiGetClaimStaticDepositQuoteRpcResponse,exports.WalletApiGetStaticDepositAddressRpcInput=s.WalletApiGetStaticDepositAddressRpcInput,exports.WalletApiGetStaticDepositAddressRpcResponse=s.WalletApiGetStaticDepositAddressRpcResponse,exports.WalletApiPayLightningInvoiceRpcInput=s.WalletApiPayLightningInvoiceRpcInput,exports.WalletApiPayLightningInvoiceRpcResponse=s.WalletApiPayLightningInvoiceRpcResponse,exports.WalletApiSignMessageWithIdentityKeyRpcInput=s.WalletApiSignMessageWithIdentityKeyRpcInput,exports.WalletApiSignMessageWithIdentityKeyRpcResponse=s.WalletApiSignMessageWithIdentityKeyRpcResponse,exports.WalletApiSparkRpcInput=s.WalletApiSparkRpcInput,exports.WalletApiTransferRpcInput=s.WalletApiTransferRpcInput,exports.WalletApiTransferRpcResponse=s.WalletApiTransferRpcResponse,exports.WalletApiTransferTokensRpcInput=s.WalletApiTransferTokensRpcInput,exports.WalletApiTransferTokensRpcResponse=s.WalletApiTransferTokensRpcResponse,exports.OutputWithPreviousTransactionData=o.OutputWithPreviousTransactionData,exports.SparkBalance=o.SparkBalance,exports.SparkLightningReceiveRequest=o.SparkLightningReceiveRequest,exports.SparkLightningSendRequest=o.SparkLightningSendRequest,exports.SparkNetwork=o.SparkNetwork,exports.SparkTransfer=o.SparkTransfer,exports.AdditionalSignerInput=Se,exports.Aptos=re,exports.Asset=Ce,exports.AssetAmountDetails=Ge,exports.AuthorizationKeyDashboardResponse=Le,exports.AuthorizationKeyResponse=Be,exports.AuthorizationKeyRole=m,exports.BalanceFiatCurrency=Pe,exports.BaseWalletApiCreateInput=ve,exports.BitcoinSegwit=oe,exports.CAIP2=u,exports.CURVE_SIGNING="curve_signing",exports.ChainNameInput=Ee,exports.ChainType=me,exports.Cosmos=te,exports.CurveSigningChainTypes=ze,exports.CurveSigningLiteral=ue,exports.CurveType=p,exports.CustodialWalletCreateInput=$e,exports.ECDSA=c,exports.EdDSA=d,exports.Ethereum=X,exports.EthereumAsset=De,exports.ExtendedChainTypes=ge,exports.FirstClassChainTypes=he,exports.HDPath=l,exports.Hash=b,exports.Hex=y,exports.KeyQuorumId=ye,exports.Movement=ne,exports.Near=pe,exports.OwnerInput=Ae,exports.OwnerInputFields=We,exports.P256PublicKey=be,exports.PolicyInput=Ie,exports.PrivyTransactionResponseWithDetails=Ve,exports.Quantity=W,exports.SigningAlgorithm=z,exports.Solana=ee,exports.SolanaAsset=fe,exports.SolanaWalletDerivationStrategy=xe,exports.Spark=ce,exports.Starknet=de,exports.Stellar=ie,exports.Sui=ae,exports.Ton=le,exports.TransactionDetail=Fe,exports.TransactionResponseWithDetails=He,exports.TransferReceivedTransactionDetail=Ue,exports.TransferSentTransactionDetail=Qe,exports.Tron=se,exports.TypedDataDomainInputParams=C,exports.TypedDataTypesInputParams=E,exports.UnsignedEthereumTransaction=I,exports.WalletApiCreateInput=je,exports.WalletApiCreateResponse=Te,exports.WalletApiEthereumPersonalSignRpcInput=T,exports.WalletApiEthereumPersonalSignRpcInputParams=j,exports.WalletApiEthereumPersonalSignRpcResponse=Q,exports.WalletApiEthereumRpcInput=G,exports.WalletApiEthereumSecp256k1SignRpcInput=k,exports.WalletApiEthereumSecp256k1SignRpcResponse=U,exports.WalletApiEthereumSendTransactionRpcInput=v,exports.WalletApiEthereumSendTransactionRpcResponse=N,exports.WalletApiEthereumSign7702AuthorizationRpcInput=D,exports.WalletApiEthereumSign7702AuthorizationRpcResponse=H,exports.WalletApiEthereumSignTransactionRpcInput=S,exports.WalletApiEthereumSignTransactionRpcResponse=M,exports.WalletApiEthereumSignTypedDataRpcInput=P,exports.WalletApiEthereumSignTypedDataRpcResponse=V,exports.WalletApiExportPrivateKeyRpcInput=w,exports.WalletApiExportPrivateKeyRpcResponse=Y,exports.WalletApiRawSignInput=f,exports.WalletApiRawSignResponse=$,exports.WalletApiRegisterAuthorizationKeyInput=J,exports.WalletApiRevokeAuthorizationKeyInput=Ke,exports.WalletApiRpcInput=K,exports.WalletApiRpcResponse=Z,exports.WalletApiSolanaRpcInput=q,exports.WalletApiSolanaSignAndSendTransactionRpcInput=x,exports.WalletApiSolanaSignAndSendTransactionRpcResponse=B,exports.WalletApiSolanaSignMessageRpcInput=R,exports.WalletApiSolanaSignMessageRpcResponse=O,exports.WalletApiSolanaSignTransactionRpcInput=_,exports.WalletApiSolanaSignTransactionRpcResponse=L,exports.WalletEntropyType=_e,exports.WalletGetBalanceInput=we,exports.WalletGetBalanceResponse=qe,exports.WalletGetTransactionsInput=Ne,exports.WalletGetTransactionsResponse=Ye,exports.WalletIdFromPath=ke,exports.WalletResponse=Re,exports.WalletUpdateInput=Me,exports.WalletsSearchInput=Oe;
