import{z as t}from"zod";import{UnauthorizedError as e,PrivyErrorCode as o}from"@privy-io/api-base";import{SUPPORTED_OAUTH_PROVIDERS as r}from"../constants/oauth.mjs";import{BaseAccountTransferInput as i}from"./account-transfer.mjs";import{AuthenticateMode as a}from"./core.mjs";import{CustomOAuthProviderID as s}from"./oauth-custom.mjs";import{User as n,OAuthTokens as p}from"./user.mjs";import"bs58";import"libphonenumber-js/max";import"viem";import"./smart-wallet-config.mjs";import"../constants/smart-wallets.mjs";import"./wallet-api/wallets/index.mjs";import"./api.mjs";import"./transaction.mjs";import"./wallet-api/export.mjs";import"./wallet-api/wallets/spark/index.mjs";import"./wallet-api/wallets/spark/utils.mjs";const m=t.enum(r,{invalid_type_error:"Please specify a supported provider.",required_error:"Please specify a supported provider."}),l=m.or(t.custom((t=>"string"==typeof t&&/^privy:[a-z0-9]{25}$/i.test(t)),{message:"Please specify a supported provider."})).or(s),c=t.object({authorization_code:t.string(),state_code:t.string(),code_verifier:t.string().min(43).max(128).optional(),code_type:t.enum(["raw"]).optional()}).merge(a).catch((()=>{throw new e("Please specify authorization_code and state_code.",o.INVALID_CREDENTIALS)})),d=t.object({redirect_to:t.string({required_error:"Please provide a redirect_to value."}),provider:l,token:t.string().optional(),state_code:t.string().optional(),code_challenge:t.string().optional()}),u=t.object({authorization_code:t.string(),state_code:t.string(),code_verifier:t.string().min(43).max(128).optional(),code_type:t.enum(["raw"]).optional()}),g=t.object({subject:t.string(),provider:l}),j=t.object({url:t.string()}),_=n.extend({oauth_tokens:p.optional()}),f=i.extend({userInfo:t.object({subject:t.string(),name:t.string().optional(),username:t.string().optional(),profilePictureUrl:t.string().optional(),email:t.string().optional().nullable(),vanityName:t.string().optional(),meta:t.object({providerAppId:t.string().optional()}).optional(),embeddedWalletAddresses:t.array(t.string()).optional(),smartWalletAddresses:t.array(t.string()).optional()})});export{c as AuthenticateOauthInput,m as ExternalOAuthProvider,u as LinkOAuthInput,d as OAuthInitInput,j as OAuthInitResponse,_ as OAuthLinkResponse,l as OAuthProvider,g as OAuthUnlinkInput,r as SUPPORTED_OAUTH_PROVIDERS,f as TransferOAuthInput};
